@page "/documents/create/"
<h3>Create a Document</h3>
@*First choose DDNS*@
    <div class="form-group">
        <label for="deptDocNumStruct">Department Document number structure</label>
        <Select class="form-control" id="deptDocNumStruct" 
            @onchange="HandleDDNSChange">
            <option value="0">-- Select DDNS --</option>
            @foreach (var ddns in deptDocNumStructs)
            {
                <option value="@ddns.DeptDocNumStructId">@ddns.Description</option>
            }
        </Select>
    </div>
@if (DdnsSelected == true)
{
    <EditForm Model="@document" OnValidSubmit="CreateDocument">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @*Segment Fields*@
        @foreach (var entry in combinedCollection)
        {
            <div class="border mt-2 p-2 ">
                <div>
                    <p>
                        <b>Category name: </b>@entry.segmentCategory.Name
                    </p>
                    <p>
                        <b>Category Description: </b>@entry.segmentCategory.Description
                    </p>
                </div>
                @*Segment value and description fields*@
                @if (entry.segmentCategory.IsPredefined == true)
                {
                    <div>
                        <label for="predefinedSegmentData">Predefined Segment Data</label>
                        <InputSelect class="form-control" id="predefinedSegmentData" @bind-Value="entry.documentSegment.SegmentDataId">
                            <option hidden>-- Select Segment Data --</option>
                            @foreach (var segmentData in entry.segmentCategory.SegmentDatum)
                            {
                                <option value="@segmentData.SegmentDataId">@segmentData.Description , @segmentData.Value</option>
                            }
                        </InputSelect>
                    </div>
                    @if (entry.documentSegment.SegmentDataId != null && entry.documentSegment.SegmentDataId.HasValue)
                    {
                        var selectedSegmentData = segmentDatum.FirstOrDefault(s => s.SegmentDataId == entry.documentSegment.SegmentDataId.Value);
                        entry.documentSegment.Value = selectedSegmentData.Value;
                        entry.documentSegment.ValueDescription = selectedSegmentData.Description;
                    }
                }
                @* not predefined Segment Category = user input value and description *@
                else
                {
                    <div class="form-group">
                        <label for="segmentValue">Segment Value</label>
                        <InputText class="form-control" id="segmentValue" @bind-Value="entry.documentSegment.Value" />
                        <ValidationMessage For="@(() => entry.documentSegment.Value)" />
                    </div>
                    <div class="form-group">
                        <label for="segmentValueDescription">Segment value description </label>
                        <InputText class="form-control" id="segmentValueDescription" @bind-Value="entry.documentSegment.ValueDescription" />
                        <ValidationMessage For="@(() => entry.documentSegment.ValueDescription)" />
                    </div>
                
                }
                @*assign category name and description to documentSegment*@
                @{
                    entry.documentSegment.CategoryName = entry.segmentCategory.Name;
                    entry.documentSegment.CategoryDescription = entry.segmentCategory.Description;
                }
            </div>
        }
        @* Description field *@
        <div class="form-group">
            <label for="description">Description</label>
            <InputText class="form-control" id="description" @bind-Value="document.Description" />
            <ValidationMessage For="@(() => document.Description)" />
        </div>
        @* Status field*@
        <div>
            <label for="status">Status</label>
            <InputSelect class="form-control" id="status" @bind-Value="document.StatusId">
                @foreach (var status in statuses)
                {
                    <option value="@status.StatusID">@status.Description</option>
                }
            </InputSelect>
        </div>
        @* Media Type field *@
        <div>
            <label for="mediaType">Media Type</label>
            <InputSelect class="form-control" id="mediaType" @bind-Value="document.MediaTypeId">
                @foreach (var mediaType in mediaTypes)
                {
                    <option value="@mediaType.MediaTypeId">@mediaType.Description</option>
                }
            </InputSelect>
        </div>
        @* Revision field*@
        <div class="form-group">
            <label for="revision">Revision</label>
            <InputText class="form-control" id="revision" @bind-Value="document.Revision" />
            <ValidationMessage For="@(() => document.Revision)" />
        </div>
        @* Requested By field*@
        <div class="form-group">
            <label for="requestedBy">Requested By</label>
            <InputText class="form-control" id="requestedBy" @bind-Value="document.RequestedBy" />
            <ValidationMessage For="@(() => document.RequestedBy)" />
        </div>
        @* Location field*@
        <div class="form-group">
            <label for="location">Location</label>
            <InputText class="form-control" id="location" @bind-Value="document.Location" />
            <ValidationMessage For="@(() => document.Location)" />
        </div>
        <hr/>
        <div class="d-flex">
            <button class="btn btn-success me-2" type="submit">Create Document</button>
            <BackToList Target="documents" />
        </div>
    </EditForm>
}